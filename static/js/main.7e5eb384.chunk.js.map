{"version":3,"sources":["pokecard.js","pokedex.js","pokegame.js","app.js","serviceWorker.js","index.js"],"names":["Pokecard","_this$props$poke","this","props","poke","id","name","type","base_experience","idStr","concat","imgSrc","react_default","a","createElement","className","src","alt","Component","Pokedex","isWinner","style","color","exp","pokes","map","index","src_pokecard","key","Pokegame","expHand1","expHand2","hand1","hand2","Object","toConsumableArray","pokemon","length","Math","floor","random","splice","push","reduce","accumulator","current","src_pokedex","defaultProps","App","src_pokegame","Boolean","window","location","hostname","match","ReactDOM","render","src_app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7e5eb384.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './pokecard.css';\r\n\r\nclass Pokecard extends Component{\r\n    render(){\r\n        const {id, name, type, base_experience} = this.props.poke;\r\n        const idStr = id < 10 ? `00${id}` : id < 99 ? `0${id}` : id;\r\n        const imgSrc = `https://assets.pokemon.com/assets/cms2/img/pokedex/detail/${idStr}.png`\r\n        return(\r\n            <div className=\"pokecard\">\r\n                <h1 className=\"pokecard-name\">{name}</h1>\r\n                <div className=\"pokecard-container-img\">\r\n                    <img className=\"pokecard-img\" src={imgSrc} alt={name}/>\r\n                </div>\r\n                <h2 className=\"pokecard-info\">{type}</h2>\r\n                <h2 className=\"pokecard-info\">{base_experience}</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Pokecard;","import React, {Component} from 'react';\r\nimport Pokecard from './pokecard';\r\nimport './pokedex.css';\r\n\r\nclass Pokedex extends Component{\r\n    render(){\r\n        const {isWinner} = this.props;\r\n        return(\r\n            <div className=\"pokedex\">\r\n                <h1 className=\"pokedex-status pokedex-info\" \r\n                    style={{color: isWinner? 'green': 'red'}}>\r\n                        {isWinner? 'Winner': 'Looser'}\r\n                </h1>\r\n                <h2 className=\"pokedex-exp pokedex-info\">{this.props.exp}</h2>\r\n                <div className=\"pokedex-container\">\r\n                    {this.props.pokes.map((poke, index) => (\r\n                        <Pokecard key={index} poke={poke}/>\r\n                    ))}\r\n                </div>                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Pokedex;","import React, {Component} from 'react';\r\nimport Pokedex from './pokedex';\r\nimport './pokegame.css';\r\n\r\nclass Pokegame extends Component{\r\n    static defaultProps = {\r\n        pokemon : [\r\n            {id: 4, name: 'Charmander', type: 'fire', base_experience: 62},\r\n            {id: 7, name: 'Squirtle', type: 'water', base_experience: 63},\r\n            {id: 11, name: 'Metapod', type: 'bug', base_experience: 72},\r\n            {id: 12, name: 'Butterfree', type: 'flying', base_experience: 178},\r\n            {id: 25, name: 'Pikachu', type: 'electric', base_experience: 112},\r\n            {id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95},\r\n            {id: 94, name: 'Gengar', type: 'poison', base_experience: 225},\r\n            {id: 133, name: 'Eevee', type: 'normal', base_experience: 65}\r\n        ]\r\n    }\r\n    render(){\r\n        let hand1 = [], \r\n            hand2 = [...this.props.pokemon], \r\n            index,\r\n            expHand1,\r\n            expHand2;\r\n        while(hand1.length < hand2.length){\r\n            index = Math.floor(Math.random() * hand2.length);\r\n            var poke = hand2.splice(index, 1)[0];\r\n            hand1.push(poke);\r\n        }    \r\n        expHand1 = hand1.reduce((accumulator, current) => accumulator + current.base_experience, 0);\r\n        expHand2 = hand2.reduce((accumulator, current) => accumulator + current.base_experience, 0);\r\n        return(\r\n            <div className=\"pokegame\">\r\n                <Pokedex pokes={hand1} exp={expHand1} isWinner={expHand1 > expHand2}/>\r\n                <Pokedex pokes={hand2} exp={expHand2} isWinner={expHand2 > expHand1}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Pokegame;","import React from 'react';\nimport Pokegame from './pokegame';\nimport './app.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pokegame />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}